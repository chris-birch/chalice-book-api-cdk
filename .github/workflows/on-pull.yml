name: Deploy to AWS

on:
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'swagger'

env:
  POETRY_HOME: /opt/poetry
  AWS_DEFAULT_REGION: eu-west-2
  TF_CLOUD_ORGANIZATION: "BlueCrossIT"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "chalice-book-api-cdk"
  CONFIG_DIRECTORY: "./terraform"

jobs:
  build-go-binaries:
      #----------------------------------------------
      #       check-out & build Go binaries
      #----------------------------------------------
      runs-on: ubuntu-latest
      strategy:
        matrix:
          go-projects: [csv_processor_function_code, user_api_function_code]    
      defaults:
       run: 
          working-directory: ./go/${{ matrix.go-projects }}
      steps:
        - uses: actions/checkout@v4
        
        - name: Setup Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.20'
        
        - name: Install dependencies
          run: go get .
          
        - name: Build Binaries
          run: GOOS=linux GOARCH=arm64 go build -tags lambda.norpc -o ./binaries/bootstrap .

        - name: Archive binaries
          run: |
            mkdir ${{ github.workspace }}/archive && cd ${{ github.workspace }}/archive
            zip ${{ matrix.go-projects }} -j "${{ github.workspace }}/go/${{ matrix.go-projects }}/binaries/bootstrap"

        - name: Save archive as artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.go-projects }}
            path: ${{ github.workspace }}/archive/**
            if-no-files-found: error
  
  sync-artifacts-with-s3:
    #----------------------------------------------
    #       Sync artifacts to an S3 bucket
    #----------------------------------------------
    needs: build-go-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            upload_go_binaries_to_s3.py
          sparse-checkout-cone-mode: false

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ${{ github.workspace }}/artifacts

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Run sync script
        run: |
          pip install boto3
          python ./scripts/upload_go_binaries_to_s3.py ${{ github.workspace }}/artifacts

  plan-terraform-assets:
    #----------------------------------------------
    #       Terraform Plan
    #----------------------------------------------
      needs: sync-artifacts-with-s3      
      name: "Terraform Plan"
      runs-on: ubuntu-latest
      permissions:
        contents: read
        pull-requests: write
      steps:
        - name: Checkout
          uses: actions/checkout@v3
  
        - name: Upload Configuration
          uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
          id: plan-upload
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            directory: ${{ env.CONFIG_DIRECTORY }}
            speculative: true
  
        - name: Create Plan Run
          uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
          id: plan-run
          with:
            workspace: ${{ env.TF_WORKSPACE }}
            configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
            plan_only: true
  
        - name: Get Plan Output
          uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
          id: plan-output
          with:
            plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
  
        - name: Update PR
          uses: actions/github-script@v6
          id: plan-comment
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
              });
              const output = `#### Terraform Cloud Plan Output
                 \`\`\`
                 Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                 \`\`\`
                 [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
                 `;
              // 3. Delete previous comment so PR timeline makes sense
              if (botComment) {
                github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                });
              }
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
          
  run-py-tests:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo & set-up python
      #----------------------------------------------    
      - uses: actions/checkout@v3

      - name: Install Poetry
        run: pipx install poetry

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with: 
          python-version: '3.9'
          cache: 'poetry'

      #----------------------------------------------
      #       Install app dependencies 
      #----------------------------------------------
      - name: Check oetry lock file
        run: poetry check --lock

      - name: Install dependencies
        run: poetry install --with dev,testing --no-interaction --no-root --sync

      #----------------------------------------------
      #       Run Pytest
      #----------------------------------------------
      - name: Run testing script
        working-directory: ./tests
        run: ./start_tests.sh