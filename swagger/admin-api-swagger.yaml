openapi: 3.0.0
info:
  title: Books
  description: |
    This is a sample book server. You can lookup, edit and delete books.
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/chris-birch/BookApi/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://79ciii9fu7.execute-api.eu-west-2.amazonaws.com/api
  description: AWS API Gateway
tags:
- name: books
  description: Everything about books
paths:
  /books:
    get:
      tags:
      - books
      summary: Get books
      description: Get all books or query by book ID
      parameters:
      - name: book_id
        in: query
        description: Return a single book
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Invalid query parameter used
        "404":
          description: Book ID not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    post:
      tags:
      - books
      summary: Create new book(s)
      description: Create one or more new books.
      requestBody:
        $ref: '#/components/requestBodies/PostBook'
      responses:
        "400":
          description: Book ID already exists or request body validation error
        "201":
          description: Book created
  /books/{pk}:
    get:
      tags:
      - books
      summary: Get book by PK
      description: Returns a single book using the UUID Primary Key
      parameters:
      - name: pk
        in: path
        description: PK of book to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Book not found
    put:
      tags:
      - books
      summary: Update an existing book
      parameters:
      - name: pk
        in: path
        description: PK of book to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        "400":
          description: Request body validation failed
        "404":
          description: Book not found
        "204":
          description: Update successful
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - books
      summary: Delete a book
      parameters:
      - name: pk
        in: path
        description: PK of book to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Successfully deleted book
        "404":
          description: Book not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
components:
  schemas:
    PostBook:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        book_id:
          type: integer
          description: "User defined, unique ID for the book"
        isbn:
          type: integer
          description: ISBN Number for the book
        authors:
          type: string
        original_publication_year:
          type: integer
          format: int64
        title:
          type: string
          description: Title of the book
        language_code:
          type: string
        average_rating:
          type: integer
          format: float
    ApiResponse:
      type: object
      properties:
        pk:
          type: string
          description: UUID of the book
        book_id:
          type: integer
          description: "User defined, unique ID for the book"
        isbn:
          type: integer
          description: ISBN Number for the book
        authors:
          type: string
        original_publication_year:
          type: integer
          format: int64
        title:
          type: string
          description: Title of the book
        language_code:
          type: string
        average_rating:
          type: integer
          format: float
  requestBodies:
    Book:
      description: New Book object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
      required: true
    PostBook:
      description: List of new Book objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostBook'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
